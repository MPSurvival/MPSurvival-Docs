{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udded MPSurvival \u2014 Ultimate Multiplayer Survival Template","text":"<p>Welcome to the official documentation for MPSurvival, the ultimate template to kickstart your multiplayer survival game in Unreal Engine.</p> <p>This template is designed to save you weeks of work by providing a clean, modular, and fully networked foundation \u2014 all Blueprint-based and ready to customize.</p> <p>\ud83d\udd01 Regular updates are delivered frequently! Check the roadmap to see what's coming next.</p>"},{"location":"#what-is-mpsurvival","title":"\ud83d\udca5 What is MPSurvival?","text":"<p>MPSurvival gives you a robust starting point for your own survival game \u2014 no bloat, just essentials. It's multiplayer-ready, 100% Blueprint-based, and packed with well-documented systems covering:</p> <ul> <li>Inventory and storage</li> <li>Crafting</li> <li>Player vitals (hunger, thirst, health)</li> <li>Gathering and tools</li> <li>Gear and equipment</li> <li>Clean animated UI inspired by modern survival games</li> </ul>"},{"location":"#key-features","title":"\u2699\ufe0f Key Features","text":""},{"location":"#inventory-system","title":"Inventory System","text":"<ul> <li>Drag &amp; drop, stack splitting, slot interaction</li> <li>Create new items via Data Assets with minimal setup</li> <li>Multiplayer-ready: full replication support</li> <li>Built-in storage system</li> </ul>"},{"location":"#crafting","title":"Crafting","text":"<ul> <li>Support for crafting categories and recipes</li> <li>Easy setup via Data Assets</li> <li>Feedback-ready system (animations, sounds, particles...)</li> </ul>"},{"location":"#tools-resource-gathering","title":"Tools &amp; Resource Gathering","text":"<ul> <li>Equip and use tools (axes, pickaxes\u2026) with procedural first-person animations</li> <li>Chop trees, break rocks, gather resources</li> <li>Add new gatherables with minimal steps</li> </ul>"},{"location":"#survival-stats","title":"Survival Stats","text":"<ul> <li>Built-in health, thirst, and hunger systems</li> <li>Death handling included</li> <li>Stats degrade over time or based on actions</li> <li>Easy to extend with your own stats</li> </ul>"},{"location":"#food-water","title":"Food &amp; Water","text":"<ul> <li>Create consumables (healing, hydration effects, etc.)</li> <li>Add custom effects quickly</li> </ul>"},{"location":"#gear-armor","title":"Gear &amp; Armor","text":"<ul> <li>Equip armor/clothing on body parts (head, body, legs\u2026)</li> <li>Gear impacts stats or visuals</li> <li>Fully customizable system</li> </ul>"},{"location":"#stylized-ui","title":"Stylized UI","text":"<ul> <li>Built using UMG</li> <li>Clean, animated, and inspired by modern survival titles</li> </ul>"},{"location":"#join-the-community","title":"\ud83d\udce2 Join the Community","text":"<p>Got ideas? Need help? Found a bug?</p> <p>Join the Discord server to connect with other devs, give feedback, or ask for support. Your suggestions directly shape future updates!</p> <p>\ud83d\udc49 Join the MPSurvival Discord</p>"},{"location":"craft/crafting_creation/","title":"\ud83d\ude80 How to create a crafting recipe ?","text":""},{"location":"craft/crafting_creation/#1-create-a-new-crafting-data-asset","title":"1. Create a new crafting data asset","text":"<p>Go to the Content Browser, right-click \u2192 Miscellaneous \u2192 Data Asset.</p> <p>Select <code>PDA_ItemCraftData</code> as the class, then name it something like <code>DA_Wood_Craft</code>.</p>"},{"location":"craft/crafting_creation/#2-fill-in-the-crafting-recipe-informations","title":"2. Fill in the crafting recipe informations","text":"<p>Open the newly created Data Asset and fill in the fields:</p> Property Description <code>Item Output</code> Reference to the resulting item (<code>PDA_ItemData</code>) <code>Output Amount</code> Number of items crafted per recipe <code>Craft Costs</code> Array of required items and their amounts <code>Time to Craft</code> Time (in seconds) needed to craft the item <code>CraftedSound</code> Sound when craft finished <code>CraftingSound</code> Sound when crafting is in progress"},{"location":"craft/crafting_creation/#2-add-the-recipe-in-the-game-data","title":"2. Add the recipe in the game data","text":"<p>Open : <code>MPSurvival/Blueprints/PlayerCharacter/GI_SurvivalInstance</code></p> <p>Then add the crafting recipe asset in the map variable called : <code>CraftsData</code></p> <p></p>"},{"location":"equipment/equipment_creation/","title":"\ud83d\ude80 How to create an equipment item ?","text":"<p>The process to create an equipment item is basically the same as creating a regular item  (see How to create an item?).</p>"},{"location":"equipment/equipment_creation/#key-differences-for-equipment-items","title":"Key differences for equipment items","text":"<p>When creating an equipment item, make sure to properly set and configure the fields related to equipment:</p> <ul> <li>Configure the <code>Equippable Type</code> field accordingly.</li> <li>Fill in cosmetic fields such as <code>Cosmetic Static Mesh</code>, <code>Cosmetic Skeletal Mesh</code>, and <code>Cosmetic Socket</code> to define visuals.</li> <li>Add any relevant <code>Equipment Modifiers</code> for stats like armor, resistances, or special effects.</li> <li>Set the <code>Slot Types</code> field correctly to ensure the item appears in the appropriate slot.</li> <li>Make sure the <code>Equip Sound</code> and related fields are set for immersive feedback.</li> </ul> <p>By tweaking these fields, your item will function as proper wearable equipment in the game.</p> <p>Tip</p> <p>Always test equipment items in multiplayer to verify proper equipping, visuals, and stat modifications.</p>"},{"location":"gatherable/gatherable_creation/","title":"\ud83d\ude80 How to create a gatherable ?","text":""},{"location":"gatherable/gatherable_creation/#1-create-a-new-gatherable-data-asset","title":"1. Create a new gatherable data asset","text":"<p>Go to the Content Browser, right-click \u2192 Miscellaneous \u2192 Data Asset.</p> <p>Select <code>PDA_GatherableData</code> as the class, then name it something like <code>DA_Tree_Gatherable</code>.</p>"},{"location":"gatherable/gatherable_creation/#2-fill-in-the-gatherable-informations","title":"2. Fill in the gatherable informations","text":"<p>Open the newly created Data Asset and fill in the fields:</p> Property Description <code>Gatherable Type</code> Enum value from <code>E_GatherableTypes</code> (e.g. Tree, Stone, Bush...) <code>Gatherable Health</code> Amount of damage the gatherable can take before being destroyed <code>Drop Loots</code> Array of items dropped when the gatherable is destroyed <code>Gatherable Mesh</code> Static mesh representing the gatherable object <code>Destroy Sound</code> Sound played when the gatherable is destroyed <p>Tip</p> <p>You can extend the <code>E_GatherableTypes</code> enum to add custom gatherable categories.</p>"},{"location":"gatherable/gatherable_creation/#3-place-it-in-the-world","title":"3. Place it in the world","text":"<p>You can create a child of this blueprint and set the PDA_GatherableData in his default settings</p> <p></p>"},{"location":"interaction/interaction_creation/","title":"\ud83d\ude80 How to create an interaction with an object ?","text":""},{"location":"interaction/interaction_creation/#1-add-the-interactable-interface","title":"1. Add the interactable interface","text":"<p>In your Blueprint, add the interface <code>BPI_Interactable</code>.</p>"},{"location":"interaction/interaction_creation/#2-implement-the-interface-functions","title":"2. Implement the interface functions","text":"<p>Fill in the following interface functions:</p> Function Name Purpose <code>GetHighlightMesh</code> Returns the mesh to highlight when the player hovers <code>GetObjectName</code> Returns the display name of the object"},{"location":"interaction/interaction_creation/#3-use-interaction-events","title":"3. Use interaction events","text":"<p>You can use these Blueprint events to handle interaction logic:</p> Event Name Description <code>OnObjectSpawn</code> Custom spawn call \u2014 not called automatically at BeginPlay, call it yourself if needed <code>OnPlayerStopHover</code> Triggered when the player stops hovering over the object <code>OnPlayerHover</code> Triggered when the player starts hovering over the object <code>OnPlayerInteract</code> Triggered when the player interacts with the object <p>Tip</p> <p>These allow you to create rich, dynamic interactions adapted to your gameplay.</p>"},{"location":"items/item_creation/","title":"\ud83d\ude80 How to create an item ?","text":""},{"location":"items/item_creation/#1-create-a-new-item-data-asset","title":"1. Create a new item data asset","text":"<p>Go to the Content Browser, right-click \u2192 Miscellaneous \u2192 Data Asset.</p> <p>Select <code>PDA_ItemData</code> as the class, then name it something like <code>DA_Wood_Item</code>.</p>"},{"location":"items/item_creation/#2-fill-in-the-basic-item-informations","title":"2. Fill in the basic item informations","text":"<p>Open the newly created Data Asset and fill in the fields:</p> Property Description <code>Item ID</code> Unique identifier (must be unique across all items) <code>Item Name</code> Display name used in UI <code>Item Desc</code> Item description, shown in tooltips <code>Item Icon</code> Texture used in the inventory or crafting UI <code>Item Mesh</code> Static mesh for pickup/world representation <code>Item Size</code> Size for world scaling <code>Item Max Stack</code> Maximum number of items per slot <code>Item Max Durability</code> Optional durability system for tools, weapons, etc. <code>Item Type</code> Enum value from <code>E_ItemTypes</code> (e.g. Consumable, Gear, Tool...) <code>Slot Types</code> Defines which inventory slot types can hold the item (e.g. Main, Head, ...) <code>Item Actions</code> List of usable actions (equip, drop, split, consume, ...) <code>Equippable Type</code> Type of equipment slot (e.g. Wieldable, Head, Chestplate, ...) <code>Wieldable Class</code> Actor class spawned when equipped (tool, weapon, etc.) - Client side <code>Cosmetic Static Mesh</code> Optional visual mesh when equipped <code>Cosmetic Skeletal Mesh</code> Optional skeletal mesh for animated cosmetics <code>Cosmetic Socket</code> Name of socket/bone to attach the item to <code>Cosmetic Size</code> Scaling info for cosmetics <code>Equipment Modifiers</code> Struct of gameplay effects (armor, resistances, etc.) <code>Consume Modifiers</code> Struct of gameplay effects (hunger/thirst/health gain) <code>Pickup Sound</code> Sound played when picking the item up <code>Equip Sound</code> Sound played when equipping the item <p>Tip</p> <p>You can extend the <code>E_ItemTypes</code> enum to add more item categories like <code>Special</code>, <code>Quest</code>, etc.</p>"},{"location":"items/item_creation/#3-add-the-item-in-the-game-data","title":"3. Add the item in the game data","text":"<p>Open : <code>MPSurvival/Blueprints/PlayerCharacter/GI_SurvivalInstance</code></p> <p>Then add the item with his same ID in the map variable called : ItemsData</p> <p></p>"},{"location":"storage/storage_creation/","title":"\ud83d\ude80 How to create a storage ?","text":""},{"location":"storage/storage_creation/#1-add-the-storage-component","title":"1. Add the storage component","text":"<p>In your Blueprint, add the component <code>AC_StorageSystem</code>.</p>"},{"location":"storage/storage_creation/#2-implement-the-storage-interface","title":"2. Implement the storage interface","text":"<ul> <li>Add the interface <code>BPI_StorageManager</code> to your Blueprint.</li> <li>Implement the interface function <code>GetStorageComponent</code>.</li> <li>Return your <code>AC_StorageSystem</code> component in the return value.</li> </ul> <p>This works like the vital manager interface.</p>"},{"location":"storage/storage_creation/#3-open-the-storage-ui","title":"3. Open the storage UI","text":"<p>To open the storage, call the function <code>Owning_OpenStorage</code> from the server side.</p> <p></p> <p>Tip</p> <p>Make sure your Blueprint is properly set up on the server to allow multiplayer interaction with storage.</p>"},{"location":"vital/vital_creation/","title":"\ud83d\ude80 How to create a vital ?","text":""},{"location":"vital/vital_creation/#1-create-a-new-vital-data-asset","title":"1. Create a new vital data asset","text":"<p>Go to the Content Browser, right-click \u2192 Miscellaneous \u2192 Data Asset.</p> <p>Select <code>PDA_VitalData</code> as the class, then name it something like <code>DA_Health_Vital</code>.</p>"},{"location":"vital/vital_creation/#2-fill-in-the-vital-fields","title":"2. Fill in the vital fields","text":"<p>Open the newly created Data Asset and fill in the fields:</p> Property Description <code>Vital Name</code> Display name of the vital <code>Vital Icon</code> Icon texture used in UI <code>Vital Type</code> Enum value from <code>E_VitalsType</code> (e.g. Health, Hunger) <code>Vital Color</code> Color used for the vital\u2019s progress bar or UI element <code>Vital Max Amount</code> Maximum value the vital can reach <code>Vital Tick Decrementation</code> Rate at which the vital decreases over time (e.g. hunger, thirst)"},{"location":"vital/vital_creation/#3-add-vitals-to-blueprints","title":"3. Add vitals to Blueprints","text":"<p>You can add vitals directly to any Blueprint as long as:</p> <ul> <li>The Blueprint implements the <code>BPI_VitalManager</code> interface.</li> <li>The interface function <code>Get Vital Component</code> is properly implemented to return the vital component reference.</li> </ul> <p>This allows flexible integration of vitals on characters, NPCs, or other actors.</p> <p></p> <p>Tip</p> <p>You can extend the <code>E_VitalsType</code> enum to add more custom vital types if needed.</p>"},{"location":"wieldable/wieldable_creation/","title":"\ud83d\ude80 How to create a wieldable class ?","text":""},{"location":"wieldable/wieldable_creation/#1-choose-your-base-blueprint-class","title":"1. Choose your base blueprint class","text":"<p>There are two main base blueprints you can use:</p> <ul> <li><code>BP_WieldableMaster</code> for general wieldable items (guns, tools, etc.)</li> <li><code>BP_WieldableMelee</code> if you want to create a melee weapon with built-in melee logic</li> </ul> <p>If you want a firearm, create a child from <code>BP_WieldableMaster</code> and customize it.</p>"},{"location":"wieldable/wieldable_creation/#2-configure-fields-in-bp_wieldablemaster","title":"2. Configure fields in <code>BP_WieldableMaster</code>","text":"<p>Open your wieldable blueprint and set the following:</p> Property Description <code>Durability Consumer</code> Handles item durability usage <code>Equip Animation FPS</code> Animation played when equipping in first-person view <code>Equip Animation TPS</code> Animation played when equipping in third-person view"},{"location":"wieldable/wieldable_creation/#3-configure-fields-in-bp_wieldablemelee","title":"3. Configure fields in <code>BP_WieldableMelee</code>","text":"<p>If your wieldable is melee-based, configure these extra fields:</p> Property Description <code>Base Damage</code> Damage dealt per melee hit <code>Melee Box</code> Collision box used for hit detection <code>Melee Range</code> Maximum range of melee attack <code>Melee Cooldown</code> Time between melee attacks <code>Melee Hit Delay</code> Delay after attack before hit detection (trace) happens <code>Attack Animation FPS</code> First-person attack animation <code>Attack Animation TPS</code> Third-person attack animation <code>Hit Shake Force</code> Camera shake intensity on hit <code>Swing Shake Force</code> Camera shake intensity on swing <code>Correct Hit Sound</code> Sound played when hitting a valid target <code>Attack Sound</code> Sound played on melee attack <code>Gatherable Multiplier</code> Multiplier affecting gatherable loots"},{"location":"wieldable/wieldable_creation/#4-customize-and-extend","title":"4. Customize and extend","text":"<ul> <li>Add new animations or sounds to suit your weapon style.</li> <li>Use the existing logic in the base blueprints as a foundation.</li> <li>For firearms, extend <code>BP_WieldableMaster</code> and add your shooting logic.</li> </ul> <p>Tip</p> <p>Keep your wieldable blueprints modular and reusable for easy future updates.</p>"}]}